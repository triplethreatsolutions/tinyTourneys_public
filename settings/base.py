"""
Django settings for mySite project.

Generated by 'django-admin startproject' using Django 1.10.2.

For more information on this file, see
https://docs.djangoproject.com/en/1.10/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.10/ref/settings/
"""

import os
from django.core.exceptions import ImproperlyConfigured

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# Build path for email keys
KEYS_DIR = os.path.dirname(os.path.abspath(__file__))


# Handling Key Import Errors
def get_env_variable(var_name):
    """Get the environment variable or return exception"""
    try:
        return os.environ.get(var_name)
    except KeyError:
        error_msg = "Set the %s environment variable" % var_name
        raise ImproperlyConfigured(error_msg)


# Get ENV VARIABLES key
ENV_ROLE = get_env_variable("ENV_ROLE")

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.10/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = get_env_variable("SECRET_KEY")

# Configure a global SALT for all HashidFields to use (django-hashid-field)
HASHID_FIELD_SALT = "I love my family and Indiana Hoosier basketball 2020"

ALLOWED_HOSTS = ["127.0.0.1", ".pythonanywhere.com", "www.tinytourneys.com"]
ADMINS = [
    ("tinyTourneys", get_env_variable("EMAIL_ADMIN")),
]

# DEFAULT_FROM_EMAIL = get_env_variable('EMAIL_ADMIN')
DEFAULT_FROM_EMAIL = get_env_variable("GMAIL_EMAIL")
SERVER_EMAIL = get_env_variable("EMAIL_ADMIN")
# EMAIL_HOST = 'smtp.office365.com'
EMAIL_HOST = "smtp.gmail.com"
EMAIL_PORT = 587
EMAIL_USE_TLS = True
EMAIL_USE_SSL = False
# EMAIL_HOST_USER = 'jbowman@tnt5basketball.com'
EMAIL_HOST_USER = "tinytourneys@gmail.com"
# EMAIL_HOST_PASSWORD = get_env_variable('EMAIL_PASSWORD')
EMAIL_HOST_PASSWORD = get_env_variable("GMAIL_EMAIL_PASSWORD")
EMAIL_TIMEOUT = 60

ANALYTICAL_INTERNAL_IPS = ["127.0.0.1"]

# https://clicky.com/ - Real Time Web Analytics
CLICKY_SITE_ID = "101030016"

CRISPY_TEMPLATE_PACK = "bootstrap3"

# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "django.contrib.sites",
    # 3rd Party
    "extra_views",
    "crispy_forms",
    "analytical",
    "debug_toolbar",
    "rest_framework",
    "rest_framework.authtoken",
    "rest_framework_swagger",
    "corsheaders",
    "allauth",
    "allauth.account",
    "allauth.socialaccount",
    "rest_auth",  # Login, Logout, Password Reset
    "rest_auth.registration",
    # Local
    "users.apps.UsersConfig",
    "tournaments.apps.TournamentsConfig",
    "event_registration.apps.EventRegistrationConfig",
    "subscribers.apps.SubscribersConfig",
    "contacts.apps.ContactConfig",
    "api.apps.ApiConfig",
]

AUTH_USER_MODEL = "users.CustomUser"

# Indicates whether or not a resource is allowed to load within a frame or iframe.
# If the header is set to DENY then the browser will block the resource from loading
# in a frame no matter which site made the request.
X_FRAME_OPTIONS = "SAMEORIGIN"  # Setting this to deny inhibits AdminEmailHandler for response status 500

CORS_ORIGIN_ALLOW_ALL = True
CORS_URLS_REGEX = r"^/api/.*$"
CORS_ORIGIN_WHITELIST = ("http://127.0.0.1:8080",)

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "debug_toolbar.middleware.DebugToolbarMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "mySite.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [os.path.join(BASE_DIR, "templates")],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
                "django.template.context_processors.media",
            ],
        },
    },
]

WSGI_APPLICATION = "mySite.wsgi.application"


# Password validation
# https://docs.djangoproject.com/en/1.10/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]

# Django Rest Framework
REST_FRAMEWORK = {
    "DEFAULT_PERMISSION_CLASSES": [
        "rest_framework.permissions.IsAuthenticated",
    ],
    "DEFAULT_AUTHENTICATION_CLASSES": [
        "rest_framework.authentication.TokenAuthentication",
        "rest_framework.authentication.SessionAuthentication",
    ],
}


# Internationalization
# https://docs.djangoproject.com/en/1.10/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "America/Chicago"

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.10/howto/static-files/

STATIC_URL = "/static/"
# In production, you must define a STATIC_ROOT directory where collectstatic will copy them.
STATIC_ROOT = os.path.join(BASE_DIR, "static")

MEDIA_URL = "/media/"
MEDIA_ROOT = os.path.join(BASE_DIR, "media")

MEDIA_USERS_URL = "/media_users/"
MEDIA_USERS_ROOT = os.path.join(BASE_DIR, "media_users")

MEDIA_TEMPLATE_URL = "/media_templates/"
MEDIA_TEMPLATE_ROOT = os.path.join(BASE_DIR, "media_templates")

STATICFILES_FINDERS = [
    "django.contrib.staticfiles.finders.FileSystemFinder",
    "django.contrib.staticfiles.finders.AppDirectoriesFinder",
]

STATICFILES_DIRS = [
    os.path.join(BASE_DIR, "tournaments/static"),
    os.path.join(BASE_DIR, "tournaments/media"),
]

FIXTURE_DIRS = [
    os.path.join(BASE_DIR, "fixtures"),
]

LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "filters": {
        "require_debug_false": {
            "()": "django.utils.log.RequireDebugFalse",
        },
        "require_debug_true": {
            "()": "django.utils.log.RequireDebugTrue",
        },
    },
    "formatters": {
        "django.server": {
            "()": "django.utils.log.ServerFormatter",
            "format": "[%(server_time)s] %(message)s",
        }
    },
    "handlers": {
        "console": {
            "level": "INFO",
            "filters": ["require_debug_true"],
            "class": "logging.StreamHandler",
        },
        "django.server": {
            "level": "INFO",
            "class": "logging.StreamHandler",
            "formatter": "django.server",
        },
        "mail_admins": {
            "level": "ERROR",
            "filters": ["require_debug_false"],
            "class": "django.utils.log.AdminEmailHandler",
            "include_html": True,
        },
    },
    "loggers": {
        "django": {
            "handlers": ["console", "mail_admins"],
            "level": "ERROR",
        },
        "django.request": {
            "handlers": ["mail_admins"],
            "level": "ERROR",
            "propagate": True,
        },
        "django.server": {
            "handlers": ["django.server"],
            "level": "INFO",
            "propagate": False,
        },
    },
}

# django-rest-auth and django-allauth config
SITE_ID = 1

# Standard Django
LOGIN_URL = "/accounts/login"
LOGIN_REDIRECT_URL = "/dashboard/"
LOGOUT_REDIRECT_URL = "/"  # Go to homepage

# All-Auth
ACCOUNT_ADAPTER = "subscribers.adapter.CustomAccountAdapter"

ACCOUNT_LOGOUT_REDIRECT = "/"  # Go to homepage

ACCOUNT_USER_MODEL_USERNAME_FIELD = None

# Enforce uniqueness of e-mail addresses.
ACCOUNT_UNIQUE_EMAIL = True
ACCOUNT_USERNAME_REQUIRED = False

# Specifies the login method to use
ACCOUNT_AUTHENTICATION_METHOD = "email"

# Setting this to “mandatory” requires ACCOUNT_EMAIL_REQUIRED to be True
ACCOUNT_EMAIL_VERIFICATION = "mandatory"
# The user is required to hand over an e-mail address when signing up.
ACCOUNT_EMAIL_REQUIRED = True

ACCOUNT_EMAIL_SUBJECT_PREFIX = "[tinyTourneys.com] "
ACCOUNT_USER_DISPLAY = "users.utils.get_full_name"

# Set to None to ask the user (“Remember me?”)
ACCOUNT_SESSION_REMEMBER = None

# Used to override forms,
ACCOUNT_FORMS = {"signup": "subscribers.forms.SubscriberForm"}


AUTHENTICATION_BACKENDS = (
    # Standard Django
    "django.contrib.auth.backends.ModelBackend",
    # All-Auth
    "allauth.account.auth_backends.AuthenticationBackend",
)
